package textAdventure;

/* A long time ago, in a kingdom far far away...
 * - You find Shaquille O'Neal, who wants you to kill the king so that he can reclaim his rightful throne
 * - promises to reward you
 * - You win 1 season pass to the LA Lakers games.
 */

/*How the game ends: 
 * Give the seagull it's egg, it flies away revealing the jewel encrusted crown.
 * Kill shaq with reisen
 */

//TODO: Drowning warnings, Locked Items, Game ending
//


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

public class AdventureMain {
	
	public static void main(String[] args){
		new AdventureMain();
	}
	
	boolean end = false;
	HashMap<String, Room> roomList = new HashMap<String, Room>();
	Player player = new Player();
	Room currentRoom;
	ArrayList<Item> inventory = new ArrayList<Item>();
	
	AdventureMain(){
		Room.setUpRooms(roomList);
		currentRoom = roomList.get("gates");
		Item.makeItems(roomList);
		
		Scanner kb = new Scanner(System.in);
		System.out.println("Welcome to Zoink!");
		System.out.println(currentRoom.getTitle());
		System.out.println("======================");
		System.out.println(currentRoom.getDesc() + "\n");
		
		StringBuilder com = new StringBuilder("hello world!");
		while(player.alive){
			
			if(!currentRoom.getAir()){
				player.breathe--;
			} else {
				player.breathe = 3;
				for(Item z : inventory){
					if(z.name == "Scubagear"){
						player.breathe = 10;
					}
				}
			}
			
			if(player.breathe < 3){
				System.out.println("You are running out of breathe get to the surface quickly!");
			}
				
			if(player.breathe <= 0){
				System.out.println("You begin to lose consciousness as water fills your lungs.");
				player.alive = false;
			}
			
			if(player.alive){
				System.out.print(">");
				com = new StringBuilder(kb.nextLine().toLowerCase());
				command(com);
			}
			
			gameCases();
			
			if(!player.alive){
				System.out.println("You have died, game over.");
			}
		}
	}
	
	// various cases where you get a game over or win or solve puzzles that are associated with items 
	void gameCases(){
		for(Item z : currentRoom.itemList){
			switch(z.name){
			case "Seagull":
				if(z.dead){
					System.out.println("The gods smite you for your sinful actions.");
					player.alive = false;
					break;
				}
				for(Item y : currentRoom.itemList){
					if(y.name == "Egg"){
						System.out.println("The Seagull flies away with its child, or rather, its egg, and reveals a shiny Crown.\n");
						Item x = new Item("Crown", "A gold-encrusted crown fit for the mightiest of kings.");
						currentRoom.itemList.add(x);
						currentRoom.itemList.remove(y);
						currentRoom.itemList.remove(z);
						break;
					}
				}
				break;
			case "Troll":
				if(z.dead){
					System.out.println("Rip troll. You can pass now.");
					roomList.get("mountainpeak").riddle();
				}
				break;
			case "Shaquille O'Neal":
				if(z.dead && z.reisen){
					System.out.println("You suddenly realise that Shaq is dead, and you can live your life the way you want.\n"
							+ "Maybe you should claim the throne for yourself?");
					currentRoom.itemList.remove(z);
				} else if(z.dead && !z.reisen){
					System.out.println("You realise your mistake, as Shaq starts lumbering towards you in a menacing manner.\n");
					System.out.println("He hits you hard with his signature slam dunk move, and you pass out.");
					player.alive = false;
				}
				break;
			case "King":
				if(z.dead){
					System.out.println("You killed the king! And the throne has been succesfully re-established.\n");
					for(Item y : roomList.get("shack").itemList){
						if(y.name == "Shaquille O'Neal"){
							System.out.println("Shaq comes running into the room, realising the great work you've done.\n");
							System.out.println("\"Where is my crown?\" he asks.");
							
							for(Item x : inventory){
								if(x.name == "Crown"){
									System.out.println("You notice you have a crown in your fanny pack, and rush to give it to Shaq.\n");
									System.out.println("\"Thanks for doing this for me, buddy\", the man says. \"I owe it to you to give you..\"");
									System.out.println("\"A SEASON PASS TO LA LAKER GAMES\"");
									System.out.println("You are beaming with excitement as you gladly accept Shaq's gift. You feel accomplished\n");
									System.out.println("Congratulations! You have successfully beaten Zoink! Great job!");
									System.exit(0);
								}
							}
							System.out.println("\"I see you didn't make such an effort to worship me as your new king...\"");
							System.out.println("\"And traitors must be dealt with. Goodbye, old friend.\"");
							System.out.println("You try to understand why he is so upset, but alas you are stabbed in the back by your own friend.");
							player.alive = false;
						}
					}
					System.out.println("The throne room is empty. There is only one solution to help this: you must become the new king.");
					System.out.println("You sit snuggly into the throne, and contemplate on your life. It has been well lived out.");
					System.out.println("Congratulations! You have beaten Zoink! Good job!");
					System.exit(0);
				}
				break;
			case "Teddybear":
				int x;
				for(int i=0; i<6; i++){
					x = (int)(Math.random()*6)+1;
					switch(x){
					case 1:
						moveToRoom("n");
						break;
					case 2:
						moveToRoom("s");
						break;
					case 3:
						moveToRoom("e");
						break;
					case 4:
						moveToRoom("w");
						break;
					case 5:
						moveToRoom("u");
						break;
					case 6:
						moveToRoom("d");
						break;
					}
				}
				System.out.println("The cursed teddybear is consuming your movements. You must put it down.");
				break;
			default:
				break;
			}
		}
	}
	
	//moves to room
	void moveToRoom(String dir){
		String newRoom = currentRoom.getExit(dir);
		
		if(newRoom.length() == 0){
			System.out.println("You can't go that way.");
			return;
		}
		
		if(roomList.get(newRoom).isLocked){
			System.out.println("That room is locked!");
			return;
		}
		
		if(roomList.get(newRoom) == currentRoom){
			System.out.println(currentRoom.getTitle());
			System.out.println("================");
		} else {
			currentRoom = roomList.get(newRoom);
			System.out.println(currentRoom.getTitle());
			System.out.println("================");
			if(!currentRoom.visited){
				System.out.println(currentRoom.getDesc());
				currentRoom.visited = true;
			} else {
				int x = 0;
				System.out.println(currentRoom.getRoomDesc());
				if(currentRoom.itemList.size() > 0){
					System.out.print("You see ");
					for(Item z : currentRoom.itemList){
						if(x < currentRoom.itemList.size()-1 && currentRoom.itemList.size() > 1){
							System.out.print("a " + z.name + ", ");
						} else if(currentRoom.itemList.size() > 1){
							System.out.println("and a " + z.name + ".");
						} else {
							System.out.println("a " + z.name);
						}
						x++;
					}
				}
			}
		}
	}
	
	//takes an item in the room
	void takeItem(String itemName) {
		itemName = itemName.trim(); // remove trailing spaces
		if(itemName.length() == 0) {
			System.out.println("Take what?");
			return;
		}
		//see if item is in the room
		for(Item z : currentRoom.itemList) {
			if (z.name.toLowerCase().contains(itemName)){
				if(! z.isCarryable){
					System.out.println("You can't carry that");
					return;
				}
				inventory.add(z);
				currentRoom.itemList.remove(z);
				System.out.println("You picked up the " + itemName);
				return;
			}
		}
		System.out.println("There is no " + itemName + " here.");
	}
	
	//drops an item into the room
	void dropItem(String itemName) {
		itemName = itemName.trim();
		if(itemName.length() == 0) {
			System.out.println("Take what?");
			return;
		}
		for(Item z : inventory){
			if (z.name.toLowerCase().contains(itemName)){
				inventory.remove(z);
				currentRoom.itemList.add(z);
				System.out.println("You put down the " + itemName);
				return;
			}
		}
		System.out.println("There is no " + itemName + " in your inventory.");
	}
	
	//displays user inventory
	void displayInventory() {
		System.out.println("Fanny Pack");
		System.out.println("===========");
		
		if(inventory.size() == 0){
			System.out.println("You have nothing in your fanny pack.");
			return;
		}
		for(Item z : inventory){
			System.out.println(z.name);
		}
	}
	
	//Inspect item to show name and description
	void inspect(String itemName){
		itemName = itemName.trim();
		for(Item z : currentRoom.itemList){
			if(z.name.toLowerCase().contains(itemName)){
				System.out.println(z.name+" - "+z.description);
				return;
			}
		}
		
		for(Item z : inventory){
			if(z.name.toLowerCase().contains(itemName)){
				System.out.println(z.name+" - "+z.description);
				return;
			}
		}
		
		System.out.println("I don't see a " + itemName + " here");
	}
	
	//Sets an item death boolean to true with a weapon item
	void kill(String weapon, String victim){
		victim = victim.trim();
		weapon = weapon.trim();
		for(Item z : currentRoom.itemList) {
			if(z.name.toLowerCase().contains(victim)){
				if(z.living){
					for(Item y : inventory){
						if(y.name.toLowerCase().contains(weapon)){
							if(y.weapon){
								z.dead = true;
								return;
							} else {
								System.out.println("You can't kill " + z.name + "with that.");
							}
						} else {
							System.out.println("That weapon is not in your inventory.");
						}
					}
				} else {
					System.out.println("You can't kill something that isn't alive.");
				}
			} else {
				System.out.println("I don't see anything like that here.");
			}
		}
	}
	
	//unlocks a room if you have the key
	void unlockDoor(String door){
		door = door.trim();
		for(int i=0; i<currentRoom.exits.length; i++){
			if(currentRoom.exits[i] != ""){
				if(roomList.get(currentRoom.exits[i]).getTitle().toLowerCase().contains(door)){
					if(roomList.get(currentRoom.exits[i]).isLocked){
						for(Item z : inventory){
							if(z.key){
								if(z.name == roomList.get(currentRoom.exits[i]).keyName){
									roomList.get(currentRoom.exits[i]).isLocked = false;
									System.out.println("You unlocked the door to " + roomList.get(currentRoom.exits[i]).getTitle() + "!");
									return;
								} else {
									System.out.println("You don't have the correct key for that.");
									return;
								}
							} else {
								System.out.println("You don't have any keys.");
								return;
							}
						}
					} else {
						System.out.println("That room is unlocked, you can just walk in!");
						return;
					}
				}
			}
		}
		System.out.println("I don't see the room " + door + " here.");
	}
	
	// properly kills shaq if you have the reisen
	void poisonShaq(){
		for(Item z : currentRoom.itemList){ // is shaq in the room?
			if(z.name.toLowerCase().contains("shaq")){
				for(Item y : inventory){ // do you have the reisen?
					if(y.name == "Reisen"){
						z.poisonShaq(); // refers to item.poisonShaq(), where dead is true and reisen is true
						return;
					}
				}
				System.out.println("Poison him with what? Apple juice? C'mon man!");
				return;
			}
		}
		System.out.println("I don't see Shaq around here.");
		return;
	}
	
	// helpful information
	void help() {
		System.out.println("There are six directions: north, south, east, west, up, and down.");
		System.out.println("Type in the direction which you want to go.");
		System.out.println("You can take/pick up items as well as put them down.");
		System.out.println("You can kill living things with various items.");
		System.out.println("Keep an eye out for puzzles and secrets!");
		System.out.println("You can unlock rooms if you have the correct key.");
		System.out.println("Created by Scott Jurasek and Fraser Feeney.");
	}
	
	// Rings the bell to open the castle gates
	void ring(){
		if(currentRoom == roomList.get("belltower")){
			roomList.get("gates").bellRung(); // sets the north exit of gates to courtyard
			System.out.println("The bell rings through the kingdom and you hear gates lifting in the distance.");
			return;
		}
		System.out.println("Ding dong ding dong ding dong!");
	}
	
	// answers the troll's riddle, lets player pass and stuff
	void answerRiddle(){
		if(currentRoom == roomList.get("mountainpeak")){
			roomList.get("mountainpeak").riddle();
			System.out.println("\"Congratulations, you may pass.\" -Troll");
			for(Item z : currentRoom.itemList){
				if(z.name == "Troll"){
					currentRoom.itemList.remove(z);
					break;
				}
			}
		} else {
			System.out.println("21,22,23,24,...");
		}
	}
	
	//Executes word trimmer and then executes command
	void command (StringBuilder com){
		com = goodWords(com); // Get rid of unimportant words
		execute(com); // Execute command
	}
	
		//Executes specific commands
	void execute(StringBuilder com){
		String text = com.toString().trim().toLowerCase();
		String words[] = text.split(" ");
		switch(words.length){
		case 1:
			switch(words[0]){
			case "south": case "north": case "east": case "west": case "up": case "down":
			case "s": case "n": case "e": case "w": case "u": case "d":
				moveToRoom(words[0]);
				break;
			case "help":
				help();
				break;
			case "20":
				answerRiddle();
				break;
			case "i": case "inventory": case "inv": 
			case "items": case "item": case "backpack":
			case "pack": case "fannypack":
				displayInventory();
				break;
			case "exit":
				System.exit(0);
				break;
			case "bird":
				System.out.println("Everybody knows that the bird is the word!");
				break;
			default: 
				System.out.println("What?");
			}
			break;
		case 2:
			switch(words[0]){
			case "kill":
				System.out.println("With what?");
				break;
			case "help":
				help();
				break;
			case "inspect":
				inspect(words[1]);
				break;
			case "go": case "travel": case "head": case "walk": 
				switch(words[1]){
				case "north": case "south": case "east": case "west": case "up": case "down":
				case "n": case "s": case "e": case "w": case "u": case "d":
					moveToRoom(words[1]);
					break;
				default:
					System.out.println("What direction is that?");
				}
				break;
			
			case "ring":
				switch(words[1]){
				case "bell":
					ring();
					break;
				default:
					System.out.println("Ring a ding ding");
				}
				
				break;
			
			case "take": case "pickup":
				takeItem(words[1]);
				break;
			case "drop":
				dropItem(words[1]);
				break;
			case "open": case "unlock":
				unlockDoor(words[1]);
				break;
			case "poison":
				switch(words[1]){
				case "shaq": case "shaquille":
					poisonShaq();
					break;
				default:
					System.out.println("Poison sure is interesting.");
					break;
				}
				break;
			case "fanny":
				switch(words[1]){
				case "pack":
					displayInventory();
					break;
				default:
					System.out.println("Okay then...");
					break;
				}
				break;
			default:
				System.out.println("You what?");
				break;
			} break;
		case 3:
			switch(words[0]){
			case "help":
				help();
				break;
			case "poison":
				switch(words[1]){
				case "shaq": case "shaquille":
					switch(words[2]){
					case "o'neal": case "reisen":
						poisonShaq();
						break;
					default:
						System.out.println("Now why would anyone poison Shaq with " + words[2]);
					}
					break;
				default:
					System.out.println("Yes, poison is a thing.");
				}
				break;
			case "look":
				switch(words[1]){
				case "at":
					inspect(words[2]);
					break;
				default:
					System.out.println("Look what?");
				}
				break;
			case "kill": case "murder":
				switch(words[1]){
				case "shaq": case "shaquille":
					switch(words[2]){
					case "reisen":
						poisonShaq();
						break;
					}
					break;
				}
				kill(words[2], words[1]);
				break;
			case "pick":
				switch(words[1]){
				case "up":
					takeItem(words[2]);
					break;
				default:
					System.out.println("Pick what?");
				}
				break;
			case "put":
				switch(words[1]){
				case "down":
					dropItem(words[2]);
					break;
				default:
					System.out.println("Put what?");
				}
				break;
			default:
				System.out.println("What was that?");
				break;
			} break;
		default: 
			System.out.println("Does not compute.");
			break;
		}	
	}
	
	// Which words do we remove from the command?
	static StringBuilder goodWords(StringBuilder com){
		for(int i=0; i<com.length(); i++){ // Checks through all the command
			
			if(i < com.length()-5){ // 4-letter words
				if((com.charAt(i) == 's' && com.charAt(i+1) == 'o' && com.charAt(i+2) == 'm' && com.charAt(i+3) == 'e')
					||	(com.charAt(i) == 'w' && com.charAt(i+1) == 'i' && com.charAt(i+2) == 't' && com.charAt(i+3) == 'h')){ // Check for "some" or "with"
					if(i < com.length()-6){
						if(com.charAt(i+4) == ' '){
							if(i > 0){
								if(com.charAt(i-1) == ' '){	// Making sure the letters are their own word.
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									com.deleteCharAt(i);	// remove word and proper spaces from the string
									i=0;
								}
							} else if(i == 0){
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								i=0;
							}
						}
					} else if(i == com.length()-5 && i > 0){
						if(com.charAt(i-1) == ' '){
							com.deleteCharAt(i);
							com.deleteCharAt(i);
							com.deleteCharAt(i);
							com.deleteCharAt(i);
							com.deleteCharAt(i-1);
							i=0;
						}
					}
				} // Once the word has been removed we 'reset' the for loop and scan with the new String length.
			}
			
			if(i < com.length()-4){ // Three-letter words
				if(com.charAt(i) == 't' && com.charAt(i+1) == 'h' && com.charAt(i+2) == 'e'){
					if(i < com.length()-5){
						if(com.charAt(i+3) == ' '){
							if(i > 0){
								if(com.charAt(i-1) == ' '){
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									i=0;
								}
							} else if(i == 0){
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								i=0;
							}
						}
					} else if(i == com.length()-4 && i > 0){
						if(com.charAt(i-1) == ' '){
							com.deleteCharAt(i);
							com.deleteCharAt(i);
							com.deleteCharAt(i);
							com.deleteCharAt(i-1);
							i=0;
						}
					}
				}
			}
			
			if(i < com.length()-3){ // two letter words
				if((com.charAt(i) == 'a' && com.charAt(i+1) == 'n') || (com.charAt(i) == 't' && com.charAt(i+1) == 'o')
						|| (com.charAt(i) == 'o' && com.charAt(i+1) == 'n' || (com.charAt(i) == 'm' && com.charAt(i+1) == 'y') 
						|| (com.charAt(i) == 'i' && com.charAt(i+1) == 'n'))){
					if(i < com.length()-4){
						if(com.charAt(i+2) == ' '){
							if(i > 0){
								if(com.charAt(i-1) == ' '){
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									i=0;
								}
							} else if(i == 0){
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								i=0;
							}
						}
					} else if(i == com.length()-3 && i > 0){
						if(com.charAt(i-1) == ' '){
							com.deleteCharAt(i);
							com.deleteCharAt(i);
							com.deleteCharAt(i-1);
							i=0;
						}
					}
				}
			}
			
			if(i < com.length()-2){ // one-letter words
				if(com.charAt(i) == 'a'){
					if(i < com.length()-3){
						if(com.charAt(i+1) == ' '){
							if(i > 0){
								if(com.charAt(i-1) == ' '){
									com.deleteCharAt(i);
									com.deleteCharAt(i);
									i=0;
								}
							} else if(i == 0){
								com.deleteCharAt(i);
								com.deleteCharAt(i);
								i=0;
							}
						}
					} else if(i == com.length()-2 && i > 0){
						if(com.charAt(i-1) == ' '){
							com.deleteCharAt(i);
							com.deleteCharAt(i-1);
							i=0;
						}
					}
				}
			}
		}
		return com;
	}
	
}
